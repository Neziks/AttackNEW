package main

import (
	"fmt"
	"math/rand"
	"net"
	"runtime"
	"sync"
	"time"
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TCP –ø–∞–∫–µ—Ç–æ–≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ
func sendTCP(address string, message string, duration int, ip string, port int, wg *sync.WaitGroup) {
	defer wg.Done()
	endTime := time.Now().Add(time.Duration(duration) * time.Second)
	packetsSent := int64(0)

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–µ–º
	conn, err := net.Dial("tcp", address)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ TCP:", err)
		return
	}
	defer conn.Close()

	for time.Now().Before(endTime) {
		_, err = conn.Write([]byte(message))
		if err == nil {
			packetsSent++
		}

		// –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
		time.Sleep(time.Millisecond * time.Duration(rand.Intn(10)))
	}

	cps := float64(packetsSent) / float64(duration)
	fmt.Printf("üöÄ CPS: %.2f | üéØ TARGET: %s:%d | üì∂ PING: N/A\n", cps, ip, port)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ UDP –ø–∞–∫–µ—Ç–æ–≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ
func sendUDP(address string, message string, duration int, ip string, port int, wg *sync.WaitGroup) {
	defer wg.Done()
	endTime := time.Now().Add(time.Duration(duration) * time.Second)
	packetsSent := int64(0)

	conn, err := net.Dial("udp", address)
	if err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ UDP:", err)
		return
	}
	defer conn.Close()

	for time.Now().Before(endTime) {
		_, err = conn.Write([]byte(message))
		if err == nil {
			packetsSent++
		}

		// –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
		time.Sleep(time.Millisecond * time.Duration(rand.Intn(10)))
	}

	pps := float64(packetsSent) / float64(duration)
	fmt.Printf("‚ö° PPS: %.2f | üéØ TARGET: %s:%d | üì∂ PING: N/A\n", pps, ip, port)
}

func main() {
	runtime.GOMAXPROCS(runtime.NumCPU()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —è–¥—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

	var ip, protocol string
	var port, duration int

	fmt.Println("üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ç–µ–≤–æ–π —Ç–µ—Å—Ç–µ—Ä üîπ")

	fmt.Print("üåê –í–≤–µ–¥–∏—Ç–µ –∞–π–ø–∏: ")
	fmt.Scan(&ip)

	fmt.Print("üì° –í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç: ")
	fmt.Scan(&port)

	fmt.Print("üîÑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª (tcp/udp): ")
	fmt.Scan(&protocol)

	fmt.Print("‚è≥ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): ")
	fmt.Scan(&duration)

	address := fmt.Sprintf("%s:%d", ip, port)
	message := "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!" // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫...\n")

	var wg sync.WaitGroup
	numThreads := runtime.NumCPU() * 2 // –î–≤–æ–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —è–¥–µ—Ä
	wg.Add(numThreads)

	for i := 0; i < numThreads; i++ {
		go func() {
			switch protocol {
			case "tcp":
				sendTCP(address, message, duration, ip, port, &wg)
			case "udp":
				sendUDP(address, message, duration, ip, port, &wg)
			default:
				fmt.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tcp –∏–ª–∏ udp.")
			}
		}()
	}

	wg.Wait()
	fmt.Println("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üéâ")
}
