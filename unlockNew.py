import os
import resource
import subprocess
import logging
import speedtest

def setup_logging():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def run_command(command: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        logging.info(f"‚úÖ {command}: {result.stdout.strip()}")
    except subprocess.CalledProcessError as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {command}: {e.stderr.strip()}")

def set_limits():
    """–°–Ω—è—Ç–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤."""
    limits = {
        resource.RLIMIT_NOFILE: 1000000,
        resource.RLIMIT_NPROC: resource.RLIM_INFINITY,
        resource.RLIMIT_AS: resource.RLIM_INFINITY,
    }
    
    for limit, value in limits.items():
        try:
            soft, hard = resource.getrlimit(limit)
            new_limit = min(hard, value)
            resource.setrlimit(limit, (new_limit, new_limit))
            logging.info(f"‚úÖ –õ–∏–º–∏—Ç {limit} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_limit}")
        except ValueError as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç {limit}: {e}")

def optimize_network():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    settings = {
        'net.core.somaxconn': '65535',
        'net.core.netdev_max_backlog': '5000',
        'fs.file-max': '1000000',
        'net.ipv4.tcp_rmem': '4096 87380 16777216',
        'net.ipv4.tcp_wmem': '4096 87380 16777216',
        'net.ipv4.ip_local_port_range': '1024 65535',
        'net.ipv4.tcp_mtu_probing': '1',
        'net.ipv4.tcp_fin_timeout': '15',
        'net.ipv4.tcp_keepalive_time': '1200',
        'net.ipv4.tcp_congestion_control': 'bbr',
        'net.ipv4.tcp_fastopen': '3',
    }
    
    for key, value in settings.items():
        run_command(f'sysctl -w {key}="{value}"')

def clear_iptables():
    """–û—á–∏—Å—Ç–∫–∞ iptables."""
    commands = [
        'iptables -F',
        'iptables -P INPUT ACCEPT',
        'iptables -P OUTPUT ACCEPT',
        'iptables -P FORWARD ACCEPT',
    ]
    
    for cmd in commands:
        run_command(cmd)

def disable_services():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    services = [
        "motd-news", "snapd", "bluetooth", "avahi-daemon", "cups", "ModemManager", "whoopsie"
    ]
    
    for service in services:
        run_command(f'systemctl stop {service}')
        run_command(f'systemctl disable {service}')

def disable_snap():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ snap."""
    commands = [
        'systemctl stop snapd',
        'systemctl disable snapd',
        'apt-get purge snapd -y',
        'rm -rf /snap /var/snap /var/lib/snapd',
    ]
    
    for cmd in commands:
        run_command(cmd)

def disable_telemetry():
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤."""
    commands = [
        'systemctl stop apport',
        'systemctl disable apport',
        'systemctl stop systemd-telemetry',
        'systemctl disable systemd-telemetry',
        'sysctl -w kernel.dmesg_restrict=1',
        'apt-get remove --purge ubuntu-report popularity-contest apport whoopsie -y',
        'apt-get autoremove -y',
        'apt-get clean'
    ]
    
    for cmd in commands:
        run_command(cmd)

def find_best_server():
    """–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏ —Å–∞–º–æ–≥–æ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
    st = speedtest.Speedtest()
    st.get_best_server()
    best_server = st.results.server
    logging.info(f"üåç –õ—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä: {best_server['sponsor']} ({best_server['name']}, {best_server['country']})")
    return best_server

def apply_all():
    setup_logging()
    logging.info("‚öôÔ∏è –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...")
    
    set_limits()
    optimize_network()
    clear_iptables()
    disable_services()
    disable_snap()
    disable_telemetry()
    
    find_best_server()
    
    logging.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

if __name__ == "__main__":
    apply_all()
